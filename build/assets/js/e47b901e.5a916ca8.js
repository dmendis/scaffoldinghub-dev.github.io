"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4549],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),f=r,g=c["".concat(o,".").concat(f)]||c[f]||u[f]||l;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},606:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:8,description:"editing the scaffolding templates"},i="Editing Scaffolding Templates \u270f\ufe0f",s={unversionedId:"static-scaffolding/editing-templates",id:"static-scaffolding/editing-templates",title:"Editing Scaffolding Templates \u270f\ufe0f",description:"editing the scaffolding templates",source:"@site/docs/static-scaffolding/editing-templates.md",sourceDirName:"static-scaffolding",slug:"/static-scaffolding/editing-templates",permalink:"/docs/static-scaffolding/editing-templates",draft:!1,editUrl:"https://github.com/scaffoldinghub-dev/scaffoldinghub-dev.github.io/tree/main/docs/static-scaffolding/editing-templates.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,description:"editing the scaffolding templates"},sidebar:"tutorialSidebar",previous:{title:"Scaffolding Home Tests \ud83e\uddea\ud83c\udfe1",permalink:"/docs/static-scaffolding/scaffolding-home-tests"},next:{title:"Limitations \u274c",permalink:"/docs/static-scaffolding/limitations"}},o={},p=[{value:"Understanding scaffolding and scaffolding_test bricks",id:"understanding-scaffolding-and-scaffolding_test-bricks",level:2},{value:"Understanding scaffolding_home and scaffolding_home_test",id:"understanding-scaffolding_home-and-scaffolding_home_test",level:2},{value:"Clone locally and using",id:"clone-locally-and-using",level:2}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"editing-scaffolding-templates-\ufe0f"},"Editing Scaffolding Templates \u270f\ufe0f"),(0,r.kt)("p",null,"In a future version, I plan to look for the templates a project folder and allow overriding the defaults that come with the bricks. "),(0,r.kt)("p",null,"For now, however you will need to clone the desired bricks repo and edit the mustache templates. "),(0,r.kt)("p",null,"The structure is well documented in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.brickhub.dev/category/creating-bricks"},"mason creating brick documentation"),"."),(0,r.kt)("p",null,"The key structure for template are in the files under the ",(0,r.kt)("inlineCode",{parentName:"p"},"__brick__")," folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 brick.yaml\n\u2514\u2500\u2500 __brick__\n    \u2514\u2500\u2500<templates files and directories>\n")),(0,r.kt)("h2",{id:"understanding-scaffolding-and-scaffolding_test-bricks"},"Understanding scaffolding and scaffolding_test bricks"),(0,r.kt)("p",null,"For converting the properties string into fields and for bringing in optional bricks, the source code for the bricks leverages the hooks  ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks/pre_gen.dart")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks/post_gen.dart"),". "),(0,r.kt)("p",null,"The result is for ",(0,r.kt)("inlineCode",{parentName:"p"},"scaffolding")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"scaffolding_test")," the following variables are avaialble to the templates"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Examples"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"package"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"static_scaffolding_sample")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"feature"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"feature1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"properties"),(0,r.kt)("td",{parentName:"tr",align:null},"List","<","Map",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[{name: name, type: String, defaultValue: '', emptyValue: '', testValue: 'testString'}]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generate-test"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generate-home"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("p",null,"A sample of the template for ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/sjhorn/mason_bricks/main/bricks/scaffolding/__brick__/lib/features/%7B%7Bfeature%7D%7D/data/%7B%7Bfeature%7D%7D_repository_impl.dart"},(0,r.kt)("inlineCode",{parentName:"a"},"{{feature}}_repoistory_impl.dart"))," shows there variables in use. Also copied below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:async';\nimport 'package:{{package}}/features/{{feature}}/{{feature}}.dart';\n\nclass {{feature.pascalCase()}}RepositoryImpl extends {{feature.pascalCase()}}Repository {\n\n  final Map<String, {{feature.pascalCase()}}Model> _store = {};\n\n  @override\n  Future<void> create({{feature.pascalCase()}} {{feature}}) async {\n    _store[{{feature}}.id] = {{feature.pascalCase()}}Model.from{{feature.pascalCase()}}({{feature}});\n    addToStream({{feature.pascalCase()}}ChangeInfo(type: {{feature.pascalCase()}}ChangeType.create, {{feature}}s: [{{feature}}]));\n  }\n\n   @override\n  Future<void> readMore([bool refresh = true]) async {\n    await _get{{feature.pascalCase()}}sFromStore();\n  }\n\n  @override\n  Future<void> update({{feature.pascalCase()}} {{feature}}) async {\n    _store[{{feature}}.id] = {{feature.pascalCase()}}Model.from{{feature.pascalCase()}}({{feature}});\n    addToStream({{feature.pascalCase()}}ChangeInfo(type: {{feature.pascalCase()}}ChangeType.update, {{feature}}s: [{{feature}}]));\n  }\n\n  @override\n  Future<void> delete({{feature.pascalCase()}} {{feature}}) async {\n    _store.remove({{feature}}.id);\n    addToStream({{feature.pascalCase()}}ChangeInfo(type: {{feature.pascalCase()}}ChangeType.delete, {{feature}}s: [{{feature}}]));\n  }\n\n  Future<void> _get{{feature.pascalCase()}}sFromStore() async {\n    List<{{feature.pascalCase()}}> {{feature}}List = _store.entries\n        .map((e) => e.value.to{{feature.pascalCase()}}())\n        .toList();\n    addToStream({{feature.pascalCase()}}ChangeInfo(\n        type: {{feature.pascalCase()}}ChangeType.read,\n        {{feature}}s: {{feature}}List,\n        totalCount: {{feature}}List.length));\n  }\n}\n\n")),(0,r.kt)("h2",{id:"understanding-scaffolding_home-and-scaffolding_home_test"},"Understanding scaffolding_home and scaffolding_home_test"),(0,r.kt)("p",null,"The variables and tempalte for these bricks are much simpler. Table below shows and the sample code shows how this can be overridden. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Examples"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"package"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"static_scaffolding_sample")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"features"),(0,r.kt)("td",{parentName:"tr",align:null},"[String]"),(0,r.kt)("td",{parentName:"tr",align:null},"[feature1,feature2]")))),(0,r.kt)("p",null,"A sample of the template for ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/sjhorn/mason_bricks/main/bricks/scaffolding_home/__brick__/lib/scaffold_app.dart"},(0,r.kt)("inlineCode",{parentName:"a"},"scaffold_app.dart"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\n{{#features}}import 'package:{{package}}/features/{{.}}/{{.}}.dart';\n{{/features}}\nclass App extends StatelessWidget {\n  final NavigatorObserver? navigatorObserver;\n  const App({super.key, this.navigatorObserver});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      navigatorObservers: navigatorObserver != null ? [navigatorObserver!] : [],\n      debugShowCheckedModeBanner: false,\n      title: 'Scaffold App',\n      home: Builder(builder: (context) {\n        return Scaffold(\n          appBar: AppBar(title: const Text('Features')),\n          body: ListView(children: [\n              {{#features}}ListTile(\n                key: const Key('{{.}}-feature-tile'),\n                leading: const Icon(Icons.view_list, color: Colors.green),\n                horizontalTitleGap: 0,\n                title: const Text('{{#sentenceCase}}{{.}}{{/sentenceCase}}'),\n                onTap: () => Navigator.of(context).push({{#pascalCase}}{{.}}{{/pascalCase}}ReadView.route()),\n              ),{{/features}}\n          ]),\n        );\n      }),\n    );\n  }\n}\n\nWidget appWidget() {\n  {{#features}}final repo{{#pascalCase}}{{.}}{{/pascalCase}} = {{#pascalCase}}{{.}}{{/pascalCase}}RepositoryImpl();\n  {{/features}}return \n    MultiRepositoryProvider(\n      providers: [\n        {{#features}}RepositoryProvider<{{#pascalCase}}{{.}}{{/pascalCase}}Repository>.value(\n          value: repo{{#pascalCase}}{{.}}{{/pascalCase}},\n        ),\n      {{/features}}],\n      child: const App(),\n  );\n}\n")),(0,r.kt)("h2",{id:"clone-locally-and-using"},"Clone locally and using"),(0,r.kt)("p",null,"To clone the scaffolding bricks and use run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir ~/dev\ncd ~/dev\ngit clone https://github.com/sjhorn/mason_bricks.git\n")),(0,r.kt)("p",null,"Then to use the package in place of the orginal brick, change to the project directory and intialise as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mason add scaffolding --path ~/dev/mason_broclscaffolding\n")),(0,r.kt)("p",null,"Then run as explained in the previous pages. ."))}c.isMDXComponent=!0}}]);